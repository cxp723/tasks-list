[{"C:\\Coding\\Git\\tasks-list\\src\\index.js":"1","C:\\Coding\\Git\\tasks-list\\src\\App.js":"2","C:\\Coding\\Git\\tasks-list\\src\\TasksList\\TasksList.jsx":"3","C:\\Coding\\Git\\tasks-list\\src\\TasksList\\TaskItem.jsx":"4","C:\\Coding\\Git\\tasks-list\\src\\TasksList\\TaskInput.jsx":"5","C:\\Coding\\Git\\tasks-list\\src\\TasksList\\api.js":"6","C:\\Coding\\Git\\tasks-list\\src\\Common\\Spinner.jsx":"7","C:\\Coding\\Git\\tasks-list\\src\\BLL\\TaskListController.jsx":"8","C:\\Coding\\Git\\tasks-list\\src\\TasksList\\Message.jsx":"9"},{"size":220,"mtime":1610464243850,"results":"10","hashOfConfig":"11"},{"size":329,"mtime":1610637808133,"results":"12","hashOfConfig":"11"},{"size":1541,"mtime":1610777650470,"results":"13","hashOfConfig":"11"},{"size":2422,"mtime":1610781291589,"results":"14","hashOfConfig":"11"},{"size":976,"mtime":1610693379828,"results":"15","hashOfConfig":"11"},{"size":677,"mtime":1610704628271,"results":"16","hashOfConfig":"11"},{"size":245,"mtime":1610629442985,"results":"17","hashOfConfig":"11"},{"size":4135,"mtime":1610778689626,"results":"18","hashOfConfig":"11"},{"size":575,"mtime":1610702596431,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"x4wgsy",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Coding\\Git\\tasks-list\\src\\index.js",[],["41","42"],"C:\\Coding\\Git\\tasks-list\\src\\App.js",[],"C:\\Coding\\Git\\tasks-list\\src\\TasksList\\TasksList.jsx",[],"C:\\Coding\\Git\\tasks-list\\src\\TasksList\\TaskItem.jsx",["43","44"],"import React, { Fragment, useRef, useState } from \"react\";\r\nimport \"./taskListStyle.scss\";\r\nimport cn from \"classnames\";\r\n\r\nfunction TaskItem(props) {\r\n  const { id, title, date, completed } = props.task;\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [newTitle, setNewTitle] = useState(title);\r\n\r\n  const onSend = () => {\r\n    if (newTitle.trim()) {\r\n      props.editTask({\r\n        ...props.task,\r\n        title: newTitle,\r\n      });\r\n      setEditMode(false);\r\n    } else {\r\n      props.setMessage({\r\n        type: \"Warning\",\r\n        title: \"You can not add empty task\",\r\n        isSet: true,\r\n      });\r\n    }\r\n  };\r\n  const onKeyDown = (key) => {\r\n    switch (key.keyCode) {\r\n      case 13:\r\n        onSend();\r\n        break;\r\n      case 27:\r\n        setEditMode(false);\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n  return (\r\n    <li className=\"task\">\r\n      {editMode ? (\r\n        <div className=\"editMode\">\r\n          <input\r\n            type=\"text\"\r\n            value={newTitle}\r\n            onChange={(e) => {\r\n              setNewTitle(e.currentTarget.value);\r\n            }}\r\n            onKeyDown={onKeyDown}\r\n            ref={(editInput) => editInput && editInput.focus()}\r\n            className=\"editTask\"\r\n          />\r\n          <button className={`button green`} onClick={onSend}>\r\n            Edit\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <Fragment>\r\n          <div>\r\n            <input\r\n              className=\"isDone\"\r\n              type=\"checkbox\"\r\n              checked={completed}\r\n              onChange={() => {\r\n                props.changeCompleteness(props.task);\r\n              }}\r\n            />\r\n            <span className=\"taskNumber\">{props.number}</span>\r\n            <span className={cn(completed && \"completedTask\", \"taskTitle\")}>\r\n              {title}\r\n            </span>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button\r\n              className={cn(\"button\", \"red\")}\r\n              onClick={() => {\r\n                props.deleteTask(id);\r\n              }}\r\n            >\r\n              Delete\r\n            </button>\r\n            <button\r\n              className={`button green`}\r\n              onClick={() => {\r\n                setEditMode(true);\r\n              }}\r\n            >\r\n              Edit\r\n            </button>\r\n          </div>\r\n        </Fragment>\r\n      )}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TaskItem;\r\n","C:\\Coding\\Git\\tasks-list\\src\\TasksList\\TaskInput.jsx",[],"C:\\Coding\\Git\\tasks-list\\src\\TasksList\\api.js",[],"C:\\Coding\\Git\\tasks-list\\src\\Common\\Spinner.jsx",[],"C:\\Coding\\Git\\tasks-list\\src\\BLL\\TaskListController.jsx",["45","46"],"import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  addTaskOnServer,\r\n  getTasksFromServer,\r\n  deleteTaskFromServer,\r\n  editTaskOnServer,\r\n} from \"../TasksList/api\";\r\n\r\nexport const TaskListContext = React.createContext({\r\n  tasks: [],\r\n  isFetching: false,\r\n  message: { type: null, title: \"\", isSet: false },\r\n  setMessage: (message) => {},\r\n  addTask: (task) => {},\r\n  deleteTask: (taskId) => {},\r\n  toggleCompleteness: (taskId) => {},\r\n});\r\nconst TaskListController = React.memo((props) => {\r\n  let [tasks, setTasks] = useState([]);\r\n  let [isFetching, setIsFetching] = useState(false);\r\n  let [message, setMessage] = useState({ type: null, title: \"\", isSet: false });\r\n\r\n  async function getTasks() {\r\n    let newTasks = [];\r\n    setIsFetching(true);\r\n    try {\r\n      const data = await getTasksFromServer().then((res) => res.data);\r\n      for (var task in data) {\r\n        newTasks.push({ ...data[task], id: task });\r\n      }\r\n      setTasks(newTasks);\r\n    } catch (e) {\r\n      console.error(e);\r\n      createMessage({\r\n        type: \"Error\",\r\n        title: \"Couldn't fetch tasks\",\r\n        isSet: true,\r\n      });\r\n    }\r\n    setIsFetching(false);\r\n  }\r\n  useEffect(() => {\r\n    getTasks();\r\n  }, []);\r\n\r\n  const addTask = (task) => {\r\n    setIsFetching(true);\r\n    addTaskOnServer(task)\r\n      .then((data) => {\r\n        setTasks((tasks) => [...tasks, data]);\r\n        createMessage({\r\n          type: \"Success\",\r\n          title: \"Task was added to the list\",\r\n          isSet: true,\r\n        });\r\n        setIsFetching(false);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        createMessage({\r\n          type: \"Error\",\r\n          title: \"Couldn't add new task\",\r\n          isSet: true,\r\n        });\r\n        setIsFetching(false);\r\n      });\r\n  };\r\n  const changeCompleteness = (task) => {\r\n    setIsFetching(true);\r\n    editTaskOnServer(task.id, { ...task, completed: !task.completed })\r\n      .then(() => {\r\n        setTasks((tasks) =>\r\n          tasks.map((item) =>\r\n            item.id === task.id ? { ...task, completed: !task.completed } : item\r\n          )\r\n        );\r\n        setIsFetching(false);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        createMessage({\r\n          type: \"Error\",\r\n          title: \"Couldn't complete this task\",\r\n          isSet: true,\r\n        });\r\n        setIsFetching(false);\r\n      });\r\n  };\r\n  const editTask = (newTask) => {\r\n    setIsFetching(true);\r\n    editTaskOnServer(newTask.id, newTask)\r\n      .then(() => {\r\n        setTasks((tasks) =>\r\n          tasks.map((task) => (task.id === newTask.id ? newTask : task))\r\n        );\r\n        createMessage({\r\n          type: \"Success\",\r\n          title: \"Task was edited\",\r\n          isSet: true,\r\n        });\r\n        setIsFetching(false);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        createMessage({\r\n          type: \"Error\",\r\n          title: \"Couldn't edit the task\",\r\n          isSet: true,\r\n        });\r\n        setIsFetching(false);\r\n      });\r\n  };\r\n  const deleteTask = async (taskId) => {\r\n    setIsFetching(true);\r\n    try {\r\n      const data = await deleteTaskFromServer(taskId);\r\n      setTasks((tasks) => tasks.filter((task) => task.id !== taskId));\r\n      createMessage({\r\n        type: \"Success\",\r\n        title: \"Task was deleted\",\r\n        isSet: true,\r\n      });\r\n    } catch (e) {\r\n      console.error(\"Deleting error: \" + e);\r\n      createMessage({\r\n        type: \"Error\",\r\n        title: \"Couldn't delete task\",\r\n        isSet: true,\r\n      });\r\n    }\r\n    setIsFetching(false);\r\n  };\r\n  const createMessage = (message) => {\r\n    setMessage(message);\r\n    setTimeout(() => {\r\n      setMessage({ type: null, title: \"\", isSet: false });\r\n    }, 2000);\r\n  };\r\n  return (\r\n    <TaskListContext.Provider\r\n      value={{\r\n        tasks,\r\n        isFetching,\r\n        changeCompleteness,\r\n        addTask,\r\n        deleteTask,\r\n        editTask,\r\n        message,\r\n        setMessage: createMessage,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </TaskListContext.Provider>\r\n  );\r\n});\r\nexport default TaskListController;\r\n","C:\\Coding\\Git\\tasks-list\\src\\TasksList\\Message.jsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":27,"nodeType":"53","messageId":"54","endLine":1,"endColumn":33},{"ruleId":"51","severity":1,"message":"55","line":6,"column":22,"nodeType":"53","messageId":"54","endLine":6,"endColumn":26},{"ruleId":"56","severity":1,"message":"57","line":45,"column":6,"nodeType":"58","endLine":45,"endColumn":8,"suggestions":"59"},{"ruleId":"51","severity":1,"message":"60","line":117,"column":13,"nodeType":"53","messageId":"54","endLine":117,"endColumn":17},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'date' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTasks'. Either include it or remove the dependency array.","ArrayExpression",["63"],"'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"64","fix":"65"},"Update the dependencies array to be: [getTasks]",{"range":"66","text":"67"},[1241,1243],"[getTasks]"]