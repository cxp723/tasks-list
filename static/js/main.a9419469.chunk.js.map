{"version":3,"sources":["TasksList/TaskItem.jsx","TasksList/TaskInput.jsx","Preloader.gif","Common/Spinner.jsx","TasksList/api.js","BLL/TaskListController.jsx","TasksList/Message.jsx","TasksList/TasksList.jsx","App.js","index.js"],"names":["TaskItem","props","task","id","title","completed","date","useState","editMode","setEditMode","newTitle","setNewTitle","onSend","trim","editTask","setMessage","type","isSet","className","value","onChange","e","currentTarget","onKeyDown","key","keyCode","ref","editInput","focus","onClick","checked","changeCompleteness","number","cn","deleteTask","TaskInput","addTask","isFetching","setTask","onSubmit","length","onKeyPress","charCode","disabled","Spinner","src","preloader","alt","apiInstance","axios","create","baseURL","getTasksFromServer","get","deleteTaskFromServer","taskId","delete","editTaskOnServer","newTask","patch","TaskListContext","React","createContext","tasks","message","toggleCompleteness","TaskListController","memo","setTasks","setIsFetching","a","newTasks","then","res","data","push","console","error","createMessage","useEffect","getTasks","filter","setTimeout","Provider","map","item","catch","taskTitle","Date","post","name","addTaskOnServer","children","Message","CSSTransition","timeout","classNames","toLowerCase","TasksList","useContext","TransitionGroup","index","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9419469.chunk.js","sourcesContent":["import React, { Fragment, useRef, useState } from \"react\";\r\nimport \"./taskListStyle.scss\";\r\nimport cn from \"classnames\";\r\n\r\nfunction TaskItem(props) {\r\n  const { id, title, date, completed } = props.task;\r\n  let [editMode, setEditMode] = useState(false);\r\n  let [newTitle, setNewTitle] = useState(title);\r\n\r\n  const onSend = () => {\r\n    if (newTitle.trim()) {\r\n      props.editTask({\r\n        ...props.task,\r\n        title: newTitle,\r\n      });\r\n      setEditMode(false);\r\n    } else {\r\n      props.setMessage({\r\n        type: \"Warning\",\r\n        title: \"You can not add empty task\",\r\n        isSet: true,\r\n      });\r\n    }\r\n  };\r\n  const onKeyDown = (key) => {\r\n    switch (key.keyCode) {\r\n      case 13:\r\n        onSend();\r\n        break;\r\n      case 27:\r\n        setEditMode(false);\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n  return (\r\n    <li className=\"task\">\r\n      {editMode ? (\r\n        <div className=\"editMode\">\r\n          <input\r\n            type=\"text\"\r\n            value={newTitle}\r\n            onChange={(e) => {\r\n              setNewTitle(e.currentTarget.value);\r\n            }}\r\n            onKeyDown={onKeyDown}\r\n            ref={(editInput) => editInput && editInput.focus()}\r\n            className=\"editTask\"\r\n          />\r\n          <button className={`button green`} onClick={onSend}>\r\n            Edit\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <Fragment>\r\n          <div>\r\n            <input\r\n              className=\"isDone\"\r\n              type=\"checkbox\"\r\n              checked={completed}\r\n              onChange={() => {\r\n                props.changeCompleteness(props.task);\r\n              }}\r\n            />\r\n            <span className=\"taskNumber\">{props.number}</span>\r\n            <span className={cn(completed && \"completedTask\", \"taskTitle\")}>\r\n              {title}\r\n            </span>\r\n          </div>\r\n          <div className=\"buttons\">\r\n            <button\r\n              className={cn(\"button\", \"red\")}\r\n              onClick={() => {\r\n                props.deleteTask(id);\r\n              }}\r\n            >\r\n              Delete\r\n            </button>\r\n            <button\r\n              className={`button green`}\r\n              onClick={() => {\r\n                setEditMode(true);\r\n              }}\r\n            >\r\n              Edit\r\n            </button>\r\n          </div>\r\n        </Fragment>\r\n      )}\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default TaskItem;\r\n","import React, { useState } from \"react\";\r\nimport cn from \"classnames\";\r\n\r\nfunction TaskInput({ addTask, isFetching, setMessage }) {\r\n  let [task, setTask] = useState(\"\");\r\n  function onSubmit() {\r\n    if (task.trim().length > 0) {\r\n      addTask(task);\r\n      setTask(\"\");\r\n    } else {\r\n      setMessage({\r\n        type: \"Warning\",\r\n        title: \"You can not add empty task to the list\",\r\n        isSet: true,\r\n      });\r\n    }\r\n  }\r\n  function onKeyPress(key) {\r\n    if (key.charCode === 13) onSubmit();\r\n  }\r\n  return (\r\n    <div className=\"newTask\">\r\n      <input\r\n        className=\"taskInput\"\r\n        type=\"text\"\r\n        value={task}\r\n        onChange={(task) => setTask(task.currentTarget.value)}\r\n        onKeyPress={onKeyPress}\r\n      />\r\n      <button\r\n        disabled={isFetching}\r\n        className={cn(\"button\", \"green\", \"addButton\")}\r\n        onClick={onSubmit}\r\n      >\r\n        Add task\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskInput;\r\n","export default __webpack_public_path__ + \"static/media/Preloader.1aaab899.gif\";","import React from \"react\";\r\nimport preloader from \"../../src/Preloader.gif\";\r\nconst Spinner = () => (\r\n  <div className=\"spinnerContainer\">\r\n    <img src={preloader} alt=\"preloader\" className=\"spinner\" />\r\n  </div>\r\n);\r\nexport default Spinner;\r\n","import axios from \"axios\";\r\n\r\nconst apiInstance = axios.create({\r\n  baseURL: \"https://taksks-list-default-rtdb.firebaseio.com/\",\r\n});\r\n\r\nexport const getTasksFromServer = () => apiInstance.get(\"tasks.json\");\r\nexport const addTaskOnServer = (taskTitle) => {\r\n  const task = {\r\n    title: taskTitle,\r\n    date: new Date(),\r\n    completed: false,\r\n  };\r\n  return apiInstance\r\n    .post(\"tasks.json\", task)\r\n    .then((res) => ({ ...task, id: res.data.name }));\r\n};\r\nexport const deleteTaskFromServer = (taskId) =>\r\n  apiInstance.delete(\"tasks/\" + taskId + \".json\");\r\nexport const editTaskOnServer = (taskId, newTask) =>\r\n  apiInstance.patch(\"tasks.json\", { [taskId]: newTask });\r\n","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n  addTaskOnServer,\r\n  getTasksFromServer,\r\n  deleteTaskFromServer,\r\n  editTaskOnServer,\r\n} from \"../TasksList/api\";\r\n\r\nexport const TaskListContext = React.createContext({\r\n  tasks: [],\r\n  isFetching: false,\r\n  message: { type: null, title: \"\", isSet: false },\r\n  setMessage: (message) => {},\r\n  addTask: (task) => {},\r\n  deleteTask: (taskId) => {},\r\n  toggleCompleteness: (taskId) => {},\r\n});\r\nconst TaskListController = React.memo((props) => {\r\n  let [tasks, setTasks] = useState([]);\r\n  let [isFetching, setIsFetching] = useState(false);\r\n  let [message, setMessage] = useState({ type: null, title: \"\", isSet: false });\r\n\r\n  async function getTasks() {\r\n    let newTasks = [];\r\n    setIsFetching(true);\r\n    try {\r\n      const data = await getTasksFromServer().then((res) => res.data);\r\n      for (var task in data) {\r\n        newTasks.push({ ...data[task], id: task });\r\n      }\r\n      setTasks(newTasks);\r\n    } catch (e) {\r\n      console.error(e);\r\n      createMessage({\r\n        type: \"Error\",\r\n        title: \"Couldn't fetch tasks\",\r\n        isSet: true,\r\n      });\r\n    }\r\n    setIsFetching(false);\r\n  }\r\n  useEffect(() => {\r\n    getTasks();\r\n  }, []);\r\n\r\n  const addTask = (task) => {\r\n    setIsFetching(true);\r\n    addTaskOnServer(task)\r\n      .then((data) => {\r\n        setTasks((tasks) => [...tasks, data]);\r\n        createMessage({\r\n          type: \"Success\",\r\n          title: \"Task was added to the list\",\r\n          isSet: true,\r\n        });\r\n        setIsFetching(false);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        createMessage({\r\n          type: \"Error\",\r\n          title: \"Couldn't add new task\",\r\n          isSet: true,\r\n        });\r\n        setIsFetching(false);\r\n      });\r\n  };\r\n  const changeCompleteness = (task) => {\r\n    setIsFetching(true);\r\n    editTaskOnServer(task.id, { ...task, completed: !task.completed })\r\n      .then(() => {\r\n        setTasks((tasks) =>\r\n          tasks.map((item) =>\r\n            item.id === task.id ? { ...task, completed: !task.completed } : item\r\n          )\r\n        );\r\n        setIsFetching(false);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        createMessage({\r\n          type: \"Error\",\r\n          title: \"Couldn't complete this task\",\r\n          isSet: true,\r\n        });\r\n        setIsFetching(false);\r\n      });\r\n  };\r\n  const editTask = (newTask) => {\r\n    setIsFetching(true);\r\n    editTaskOnServer(newTask.id, newTask)\r\n      .then(() => {\r\n        setTasks((tasks) =>\r\n          tasks.map((task) => (task.id === newTask.id ? newTask : task))\r\n        );\r\n        createMessage({\r\n          type: \"Success\",\r\n          title: \"Task was edited\",\r\n          isSet: true,\r\n        });\r\n        setIsFetching(false);\r\n      })\r\n      .catch((e) => {\r\n        console.error(e);\r\n        createMessage({\r\n          type: \"Error\",\r\n          title: \"Couldn't edit the task\",\r\n          isSet: true,\r\n        });\r\n        setIsFetching(false);\r\n      });\r\n  };\r\n  const deleteTask = async (taskId) => {\r\n    setIsFetching(true);\r\n    try {\r\n      const data = await deleteTaskFromServer(taskId);\r\n      setTasks((tasks) => tasks.filter((task) => task.id !== taskId));\r\n      createMessage({\r\n        type: \"Success\",\r\n        title: \"Task was deleted\",\r\n        isSet: true,\r\n      });\r\n    } catch (e) {\r\n      console.error(\"Deleting error: \" + e);\r\n      createMessage({\r\n        type: \"Error\",\r\n        title: \"Couldn't delete task\",\r\n        isSet: true,\r\n      });\r\n    }\r\n    setIsFetching(false);\r\n  };\r\n  const createMessage = (message) => {\r\n    setMessage(message);\r\n    setTimeout(() => {\r\n      setMessage({ type: null, title: \"\", isSet: false });\r\n    }, 2000);\r\n  };\r\n  return (\r\n    <TaskListContext.Provider\r\n      value={{\r\n        tasks,\r\n        isFetching,\r\n        changeCompleteness,\r\n        addTask,\r\n        deleteTask,\r\n        editTask,\r\n        message,\r\n        setMessage: createMessage,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </TaskListContext.Provider>\r\n  );\r\n});\r\nexport default TaskListController;\r\n","import React from \"react\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\n\r\nconst Message = ({ type, title, setMessage, isSet }) => {\r\n  return isSet ? (\r\n    <CSSTransition timeout={500} classNames=\"message\">\r\n      <div className={`message ${type.toLowerCase()}-message`}>\r\n        <h1>{`${type}: ${title}`}</h1>\r\n        <span\r\n          onClick={() => {\r\n            setMessage({ type: null, title: \"\", isSet: false });\r\n          }}\r\n        >\r\n          &times;\r\n        </span>\r\n      </div>\r\n    </CSSTransition>\r\n  ) : null;\r\n};\r\nexport default Message;\r\n","import React, { useContext } from \"react\";\r\nimport TaskItem from \"./TaskItem\";\r\nimport TaskInput from \"./TaskInput\";\r\nimport Spinner from \"../Common/Spinner\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { TaskListContext } from \"../BLL/TaskListController\";\r\nimport Message from \"./Message\";\r\n\r\nconst TasksList = () => {\r\n  const {\r\n    message,\r\n    setMessage,\r\n    tasks,\r\n    isFetching,\r\n    addTask,\r\n    editTask,\r\n    deleteTask,\r\n    changeCompleteness,\r\n  } = useContext(TaskListContext);\r\n\r\n  return (\r\n    <div className=\"taskList\">\r\n      <h1>My tasks list</h1>\r\n      <TaskInput\r\n        addTask={addTask}\r\n        isFetching={isFetching}\r\n        setMessage={setMessage}\r\n      />\r\n      {isFetching ? (\r\n        <Spinner />\r\n      ) : (\r\n        <Message\r\n          type={message.type}\r\n          title={message.title}\r\n          setMessage={setMessage}\r\n          isSet={message.isSet}\r\n        />\r\n      )}\r\n      <ul>\r\n        <TransitionGroup>\r\n          {tasks.map((task, index) => (\r\n            <CSSTransition key={task.id} timeout={200} classNames=\"taskItem\">\r\n              <TaskItem\r\n                setMessage={setMessage}\r\n                changeCompleteness={changeCompleteness}\r\n                editTask={editTask}\r\n                task={task}\r\n                number={index + 1}\r\n                deleteTask={deleteTask}\r\n              />\r\n            </CSSTransition>\r\n          ))}\r\n        </TransitionGroup>\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\nexport default TasksList;\r\n","import React from \"react\";\nimport TasksList from \"./TasksList/TasksList\";\nimport \"./index\";\nimport TaskListController from \"./BLL/TaskListController\";\n\nfunction App() {\n  return (\n    <div className=\"appWrapper\">\n      <TaskListController>\n        <TasksList />\n      </TaskListController>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}